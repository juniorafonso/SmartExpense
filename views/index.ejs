<h1 class="mb-4"><%= lang.dashboard || 'Dashboard' %></h1>

<!-- Quick Action Button -->
<div class="mb-4">
  <button class="btn btn-lg btn-success" onclick="showAddExpenseShortcutModal()">
    <i class="bi bi-plus-circle-fill me-2"></i><%= lang.add_expense || 'Add Expense' %>
  </button>
</div>

<!-- Dashboard Stats -->
<div class="row mb-4 g-3">
  <div class="col-md-3 col-sm-6">
    <div class="card text-center h-100">
      <div class="card-body">
        <h5 class="card-title"><%= lang.total_projects || 'Total Projects' %></h5>
        <p class="card-text fs-4 fw-bold"><%= (typeof stats !== 'undefined' && stats.totalProjects != null) ? stats.totalProjects : 'N/A' %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3 col-sm-6">
    <div class="card text-center h-100">
      <div class="card-body">
        <h5 class="card-title"><%= lang.active_projects || 'Active Projects' %></h5>
        <p class="card-text fs-4 fw-bold text-success"><%= (typeof stats !== 'undefined' && stats.activeProjects != null) ? stats.activeProjects : 'N/A' %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3 col-sm-6">
    <div class="card text-center h-100">
      <div class="card-body">
        <h5 class="card-title"><%= lang.finished_projects || 'Finished Projects' %></h5>
        <p class="card-text fs-4 fw-bold text-info"><%= (typeof stats !== 'undefined' && stats.finishedProjects != null) ? stats.finishedProjects : 'N/A' %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3 col-sm-6">
    <div class="card text-center h-100">
      <div class="card-body">
        <h5 class="card-title"><%= lang.payment_methods || 'Payment Methods' %></h5>
        <p class="card-text fs-4 fw-bold"><%= (typeof stats !== 'undefined' && stats.paymentMethods != null) ? stats.paymentMethods : 'N/A' %></p>
      </div>
    </div>
  </div>
  <!-- Placeholder para Gráfico -->
  <!-- ... -->
</div> <!-- Fim da row dos cards de stats -->


<!-- Annual Expense Plan Section -->
<div class="mt-5">
  <!-- CORRIGIDO: Fallback para inglês -->
  <h2 class="mb-3"><%= lang.annual_expense_plan_title || 'Annual Expense Plan' %></h2>

  <div class="table-responsive">
    <table class="table table-bordered table-hover" id="annualPlanTable">
      <thead class="table-light">
        <tr>
          <th scope="col" style="width: 15%;"><%= lang.month_year || 'Month/Year' %></th>
          <th scope="col"><%= lang.expense_name || 'Expense Name' %></th>
          <th scope="col" style="width: 15%;" class="text-end"><%= lang.expense || 'Expense' %> (<%= config.DEFAULT_CURRENCY || 'CUR' %>)</th>
          <th scope="col" style="width: 15%;" class="text-end"><%= lang.deposit || 'Deposit' %> (<%= config.DEFAULT_CURRENCY || 'CUR' %>)</th>
          <th scope="col" style="width: 15%;" class="text-end"><%= lang.balance || 'Balance' %> (<%= config.DEFAULT_CURRENCY || 'CUR' %>)</th>
          <th scope="col" style="width: 10%;" class="text-center"><%= lang.actions || 'Actions' %></th>
        </tr>
      </thead>
      <tbody id="annualPlanTableBody">
        <!-- Linhas serão adicionadas dinamicamente via JS -->
      </tbody>
      <tfoot>
        <tr>
          <td colspan="4" class="text-end fw-bold"><%= lang.final_balance || 'Final Balance' %>:</td>
          <td id="finalBalance" class="text-end fw-bold">0.00</td>
          <td></td> <!-- Célula vazia para alinhar com a coluna Actions -->
        </tr>
      </tfoot>
    </table>
  </div>

  <button class="btn btn-primary mt-3" id="addPlanRow">
    <i class="bi bi-plus-lg me-2"></i><%= lang.add_row || 'Add Row' %>
  </button>
</div>
<!-- Fim da Annual Expense Plan Section -->


<!-- Incluir o Modal -->
<%- include('modals/add_expense_shortcut', {
  lang: lang,
  creditors: typeof creditors !== 'undefined' ? creditors : [],
  activeProjects: typeof activeProjects !== 'undefined' ? activeProjects : []
}) %>

<!-- Script específico da página -->
<script>
  // Função para fechar todos os modais customizados (pode já existir globalmente)
  window.closeForms = window.closeForms || function() {
    var overlays = document.querySelectorAll('.custom-form-overlay');
    var containers = document.querySelectorAll('.custom-form-container');
    overlays.forEach(function(el) { el.style.display = 'none'; });
    containers.forEach(function(el) { el.style.display = 'none'; });
  };

  // Função para abrir o modal de adicionar despesa do atalho
  window.showAddExpenseShortcutModal = function() {
    var overlay = document.getElementById('formAddExpenseShortcutOverlay');
    var container = document.getElementById('formAddExpenseShortcutContainer');
    var form = document.getElementById('addExpenseShortcutForm');
    if (!form || !overlay || !container) {
        console.error("Add expense shortcut modal elements not found.");
        return;
    }
    form.reset();
    form.action = '';
    var projectSelect = document.getElementById('add_expense_project_name');
    if (projectSelect) {
        projectSelect.value = '';
    } else {
        console.warn("Project select element not found in shortcut modal.");
    }
    overlay.style.display = 'block';
    container.style.display = 'block';
  };

  // Atualiza a action do formulário quando um projeto é selecionado
  document.getElementById('add_expense_project_name')?.addEventListener('change', function() {
    var form = document.getElementById('addExpenseShortcutForm');
    var selectedProjectName = this.value;
    if (selectedProjectName) {
      form.action = "/project/" + encodeURIComponent(selectedProjectName) + "/expenses";
    } else {
      form.action = '';
    }
  });

  // --- Annual Plan Table Logic ---
  const tableBody = document.getElementById('annualPlanTableBody');
  const addRowButton = document.getElementById('addPlanRow');
  const finalBalanceCell = document.getElementById('finalBalance');
  const config = <%- JSON.stringify(config || { DEFAULT_CURRENCY: 'CHF' }) %>;
  const lang = <%- JSON.stringify(lang || {}) %>;
  const annualPlanItems = <%- JSON.stringify(annualPlanItems || []) %>;
  const currencySymbol = config.DEFAULT_CURRENCY || 'CHF';

  // Helper to format currency for display (SIMPLIFICADO - sem separadores de milhares)
  function formatCurrency(value) {
    const numValue = parseFormattedNumber(value);
    return numValue.toFixed(2);
  }

  // Helper para converter valor formatado para número (COM LOGS INTERNOS)
  function parseFormattedNumber(value) {
      // console.log(`[parseFormattedNumber] Input: '${value}' (Type: ${typeof value})`);
      if (typeof value !== 'string') {
          value = String(value);
      }
      value = value.trim();
      if (!value) {
          // console.log("[parseFormattedNumber] Input empty, returning 0.");
          return 0;
      }
      let cleanedValue = value;
      cleanedValue = cleanedValue.replace(/['\s]/g, '');
      // console.log(`[parseFormattedNumber] After removing ' and space: '${cleanedValue}'`);
      const lastComma = cleanedValue.lastIndexOf(',');
      const lastDot = cleanedValue.lastIndexOf('.');
      let decimalSeparatorChar = null;
      let potentialDecimalIndex = -1;
      if (lastComma > lastDot) {
          decimalSeparatorChar = ',';
          potentialDecimalIndex = lastComma;
      } else if (lastDot > lastComma) {
          decimalSeparatorChar = '.';
          potentialDecimalIndex = lastDot;
      }
      // console.log(`[parseFormattedNumber] Potential decimal separator: '${decimalSeparatorChar}' at index ${potentialDecimalIndex}`);
      let beforeDecimal = cleanedValue;
      let afterDecimal = '';
      if (potentialDecimalIndex !== -1) {
          beforeDecimal = cleanedValue.substring(0, potentialDecimalIndex);
          afterDecimal = cleanedValue.substring(potentialDecimalIndex + 1);
          beforeDecimal = beforeDecimal.replace(/[,\.]/g, '');
          afterDecimal = afterDecimal.replace(/[^0-9]/g, '');
          cleanedValue = beforeDecimal + '.' + afterDecimal;
          // console.log(`[parseFormattedNumber] After cleaning thousands separators: '${cleanedValue}' (Used '${decimalSeparatorChar}' as decimal)`);
      } else {
          cleanedValue = cleanedValue.replace(/[,\.]/g, '');
          // console.log(`[parseFormattedNumber] No decimal separator found. After removing all ',' and '.': '${cleanedValue}'`);
      }
      const num = parseFloat(cleanedValue);
      // console.log(`[parseFormattedNumber] Value before parseFloat: '${cleanedValue}', Result: ${isNaN(num) ? 'NaN' : num}`);
      return isNaN(num) ? 0 : num;
  }


  // Function to update balances (COM LOGS - MANTIDOS)
  function updateBalances() {
    // console.log('[updateBalances] Starting balance calculation...');
    let currentBalance = 0;
    const rows = tableBody.querySelectorAll('tr');
    // console.log(`[updateBalances] Found ${rows.length} rows.`);
    rows.forEach((row, index) => {
      const rowId = row.dataset.id || 'N/A';
      const expenseInput = row.querySelector('.expense-amount');
      const depositInput = row.querySelector('.deposit-amount');
      const balanceCell = row.querySelector('.balance-amount');
      const expenseValueRaw = expenseInput?.value || '0';
      const depositValueRaw = depositInput?.value || '0';
      const expense = parseFormattedNumber(expenseValueRaw);
      const deposit = parseFormattedNumber(depositValueRaw);
      // console.log(`[updateBalances] Row ${index} (ID: ${rowId}): Start Balance=${currentBalance.toFixed(2)}, Raw Deposit='${depositValueRaw}', Parsed Deposit=${deposit.toFixed(2)}, Raw Expense='${expenseValueRaw}', Parsed Expense=${expense.toFixed(2)}`);
      const previousBalance = currentBalance;
      currentBalance = currentBalance + deposit - expense;
      // console.log(`[updateBalances] Row ${index} (ID: ${rowId}): Calculation: ${previousBalance.toFixed(2)} + ${deposit.toFixed(2)} - ${expense.toFixed(2)} = ${currentBalance.toFixed(2)}`);
      if (balanceCell) {
        balanceCell.textContent = formatCurrency(currentBalance);
        balanceCell.classList.remove('text-danger', 'text-success', 'text-body');
        if (currentBalance < 0) {
            balanceCell.classList.add('text-danger');
        } else if (currentBalance > 0) {
             balanceCell.classList.add('text-success');
        } else {
             balanceCell.classList.add('text-body');
        }
      } else {
          console.warn(`[updateBalances] Row ${index} (ID: ${rowId}): Balance cell not found!`);
      }
    });
    // console.log(`[updateBalances] Final calculated balance: ${currentBalance.toFixed(2)}`);
    finalBalanceCell.textContent = formatCurrency(currentBalance);
    finalBalanceCell.classList.remove('text-danger', 'text-success', 'text-body');
    if (currentBalance < 0) {
        finalBalanceCell.classList.add('text-danger');
    } else if (currentBalance > 0) {
        finalBalanceCell.classList.add('text-success');
    } else {
        finalBalanceCell.classList.add('text-body');
    }
    updateActionButtonsState();
    // console.log('[updateBalances] Balance calculation finished.');
  }

  // Function to update the state of Move Up/Down buttons
  function updateActionButtonsState() {
      const rows = tableBody.querySelectorAll('tr');
      rows.forEach((row, index) => {
          const btnMoveUp = row.querySelector('.btn-move-up');
          const btnMoveDown = row.querySelector('.btn-move-down');
          if (btnMoveUp) btnMoveUp.disabled = (index === 0);
          if (btnMoveDown) btnMoveDown.disabled = (index === rows.length - 1);
      });
  }

  // Function to create a new table row
  function createTableRow(data = {}) {
    const tr = document.createElement('tr');
    tr.dataset.id = data.id || '';
    const moveUpText = lang.move_up || 'Move Up';
    const moveDownText = lang.move_down || 'Move Down';
    const editText = lang.edit || 'Edit';
    const deleteText = lang.delete || 'Delete';
    const displayExpense = formatCurrency(data.expense_amount || 0);
    const displayDeposit = formatCurrency(data.deposit_amount || 0);
    // <<< CORRIGIDO: Placeholder usa a variável lang >>>
    const monthYearPlaceholder = lang.month_year || 'Month/Year';

    tr.innerHTML = `
      <td><input type="text" class="form-control form-control-sm month-year" value="${data.month_year || ''}" placeholder="${monthYearPlaceholder}"></td>
      <td><input type="text" class="form-control form-control-sm expense-name" value="${data.expense_name || ''}"></td>
      <td><input type="text" inputmode="decimal" class="form-control form-control-sm text-end expense-amount" value="${displayExpense}"></td>
      <td><input type="text" inputmode="decimal" class="form-control form-control-sm text-end deposit-amount" value="${displayDeposit}"></td>
      <td class="text-end balance-amount">0.00</td>
      <td class="text-center">
        <div class="dropdown">
          <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-gear-fill"></i>
          </button>
          <ul class="dropdown-menu dropdown-menu-end">
            <li><button class="dropdown-item btn-move-up" type="button"><i class="bi bi-arrow-up me-2"></i>${moveUpText}</button></li>
            <li><button class="dropdown-item btn-move-down" type="button"><i class="bi bi-arrow-down me-2"></i>${moveDownText}</button></li>
            <li><hr class="dropdown-divider"></li>
            <li><button class="dropdown-item btn-edit-row" type="button"><i class="bi bi-pencil-fill me-2"></i>${editText}</button></li>
            <li><button class="dropdown-item btn-delete-row text-danger" type="button"><i class="bi bi-trash-fill me-2"></i>${deleteText}</button></li>
          </ul>
        </div>
      </td>
    `;

    // --- Listeners de Input ---
    tr.querySelectorAll('.expense-amount, .deposit-amount').forEach(input => {
        input.addEventListener('blur', (e) => {
            const value = parseFormattedNumber(e.target.value);
            e.target.value = formatCurrency(value);
            updateBalances();
            handleSaveRow(e.target.closest('tr'));
        });
        input.addEventListener('input', (e) => {
             // Opcional: validação mais restritiva
        });
    });
    tr.querySelectorAll('.month-year, .expense-name').forEach(input => {
      input.addEventListener('blur', (e) => {
          handleSaveRow(e.target.closest('tr'));
      });
    });

    return tr;
  }

  // --- Event Handlers ---
  addRowButton.addEventListener('click', async () => {
    // console.log("Add row button clicked");
    try {
        const response = await fetch('/api/annual-plan', { method: 'POST' });
        // console.log("Add row response status:", response.status);
        if (!response.ok) {
            let errorData = { message: `HTTP error! status: ${response.status}` };
            try { errorData = await response.json(); } catch (e) { /* ignore */ }
            console.error("Failed to add row on server:", errorData);
            throw new Error(errorData.message || 'Failed to add row on server');
        }
        const newRowData = await response.json();
        // console.log("New row data received:", newRowData);
        const newRow = createTableRow(newRowData);
        tableBody.appendChild(newRow);
        updateBalances();
        newRow.querySelector('.month-year')?.focus();
    } catch (error) {
        console.error("Error adding new row:", error);
        // CORRIGIDO: Fallback para inglês
        alert(lang.error_adding_data || 'Error adding row.');
    }
  });

  // --- Handler Delegado para Ações da Tabela ---
  tableBody.addEventListener('click', (event) => {
      const button = event.target.closest('button');
      if (!button) return;
      if (button.classList.contains('btn-move-up')) {
          handleMoveUp(button);
      } else if (button.classList.contains('btn-move-down')) {
          handleMoveDown(button);
      } else if (button.classList.contains('btn-delete-row')) {
          handleDelete(button);
      } else if (button.classList.contains('btn-edit-row')) {
          handleEdit(button);
      }
  });

  // --- Funções de Ação ---
  async function handleDelete(button) {
      const row = button.closest('tr');
      const rowId = row?.dataset.id;
      if (!row) return;
      // CORRIGIDO: Fallback para inglês
      if (rowId && confirm(lang.confirm_delete_row || 'Are you sure you want to delete this row?')) {
          // console.log(`Attempting to delete row with ID: ${rowId}`);
          try {
              const response = await fetch(`/api/annual-plan/${rowId}`, { method: 'DELETE' });
              // console.log(`Delete row ${rowId} response status: ${response.status}`);
              if (!response.ok) {
                  let errorData = { message: `HTTP error! status: ${response.status}` };
                  try { errorData = await response.json(); } catch (e) { /* ignore */ }
                  console.error(`Failed to delete row ${rowId} on server:`, errorData);
                  throw new Error(errorData.message || 'Failed to delete row on server');
              }
              row.remove();
              updateBalances();
              // console.log(`Row ${rowId} deleted successfully.`);
          } catch (error) {
              console.error(`Error deleting row ${rowId}:`, error);
              // CORRIGIDO: Fallback para inglês
              alert(lang.error_deleting_data || 'Error deleting row.');
          }
      } else if (!rowId) {
          // console.log("Removing unsaved row from DOM.");
          row.remove();
          updateBalances();
      }
  }

  async function handleMoveUp(button) {
      // console.log('[handleMoveUp] Called.');
      const row = button.closest('tr');
      const previousRow = row?.previousElementSibling;
      const rowId = row?.dataset.id;
      const previousRowId = previousRow?.dataset.id;
      // console.log(`[Move Up] Attempting to move row ${rowId} above ${previousRowId}`);
      if (row && previousRow && rowId && previousRowId) {
        try {
          const item1Expense = parseFormattedNumber(row.querySelector('.expense-amount')?.value);
          const item1Deposit = parseFormattedNumber(row.querySelector('.deposit-amount')?.value);
          const item2Expense = parseFormattedNumber(previousRow.querySelector('.expense-amount')?.value);
          const item2Deposit = parseFormattedNumber(previousRow.querySelector('.deposit-amount')?.value);
          const rowData = {
            item1Id: rowId, item2Id: previousRowId,
            item1: { expense_amount: item1Expense, deposit_amount: item1Deposit },
            item2: { expense_amount: item2Expense, deposit_amount: item2Deposit },
          };
          // console.log('[Move Up] Sending data:', JSON.stringify(rowData, null, 2));
          const response = await fetch('/api/annual-plan/reorder', {
            method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(rowData),
          });
          // console.log(`[Move Up] Response status for reorder ${rowId}<->${previousRowId}: ${response.status}`);
          if (!response.ok) {
            let errorData = { message: `HTTP error! status: ${response.status}` };
            try { errorData = await response.json(); } catch (e) { /* ignore */ }
            console.error(`[Move Up] Backend error:`, errorData);
            throw new Error(errorData.message || 'Failed to reorder rows on server');
          }
          // console.log(`[Move Up] Moving row ${rowId} above ${previousRowId} in DOM.`);
          tableBody.insertBefore(row, previousRow);
          updateBalances();
          // console.log(`[Move Up] Reorder successful for ${rowId} and ${previousRowId}.`);
        } catch (error) {
          console.error(`[Move Up] CAUGHT ERROR for rows ${rowId}, ${previousRowId}:`, error);
          // CORRIGIDO: Fallback para inglês
          alert(lang.error_reordering_data || 'Error reordering rows.');
        }
      } else {
          // console.warn(`[Move Up] Condition not met: row=${!!row}, previousRow=${!!previousRow}, rowId=${rowId}, previousRowId=${previousRowId}`);
      }
    }

  async function handleMoveDown(button) {
    // console.log('[handleMoveDown] Called.');
    const row = button.closest('tr');
    const nextRow = row?.nextElementSibling;
    const rowId = row?.dataset.id;
    const nextRowId = nextRow?.dataset.id;
    // console.log(`[Move Down] Attempting to move row ${rowId} below ${nextRowId}`);
    if (row && nextRow && rowId && nextRowId) {
      try {
        const item1Expense = parseFormattedNumber(row.querySelector('.expense-amount')?.value);
        const item1Deposit = parseFormattedNumber(row.querySelector('.deposit-amount')?.value);
        const item2Expense = parseFormattedNumber(nextRow.querySelector('.expense-amount')?.value);
        const item2Deposit = parseFormattedNumber(nextRow.querySelector('.deposit-amount')?.value);
        const rowData = {
          item1Id: rowId, item2Id: nextRowId,
          item1: { expense_amount: item1Expense, deposit_amount: item1Deposit },
          item2: { expense_amount: item2Expense, deposit_amount: item2Deposit },
        };
        // console.log('[Move Down] Sending data:', JSON.stringify(rowData, null, 2));
        const response = await fetch('/api/annual-plan/reorder', {
          method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(rowData),
        });
        // console.log(`[Move Down] Response status for reorder ${rowId}<->${nextRowId}: ${response.status}`);
        if (!response.ok) {
          let errorData = { message: `HTTP error! status: ${response.status}` };
          try { errorData = await response.json(); } catch (e) { /* ignore */ }
          console.error(`[Move Down] Backend error:`, errorData);
          throw new Error(errorData.message || 'Failed to reorder rows on server');
        }
        // console.log(`[Move Down] Moving row ${nextRowId} above ${rowId} in DOM.`);
        tableBody.insertBefore(nextRow, row);
        updateBalances();
        // console.log(`[Move Down] Reorder successful for ${rowId} and ${nextRowId}.`);
      } catch (error) {
        console.error(`[Move Down] CAUGHT ERROR for rows ${rowId}, ${nextRowId}:`, error);
        // CORRIGIDO: Fallback para inglês
        alert(lang.error_reordering_data || 'Error reordering rows.');
      }
    } else {
        // console.warn(`[Move Down] Condition not met: row=${!!row}, nextRow=${!!nextRow}, rowId=${rowId}, nextRowId=${nextRowId}`);
    }
  }

  async function handleSaveRow(row) {
      if (!row) { console.error('[handleSaveRow] No row provided.'); return; }
      const rowId = row.dataset.id;
      if (!rowId) { return; }
      const expenseAmount = parseFormattedNumber(row.querySelector('.expense-amount')?.value);
      const depositAmount = parseFormattedNumber(row.querySelector('.deposit-amount')?.value);
      const data = {
          month_year: row.querySelector('.month-year')?.value || '',
          expense_name: row.querySelector('.expense-name')?.value || '',
          expense_amount: expenseAmount,
          deposit_amount: depositAmount,
      };
      try {
          const response = await fetch(`/api/annual-plan/${rowId}`, {
              method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data)
          });
          if (!response.ok) {
              let errorData = { message: `HTTP error! status: ${response.status}` };
              try { errorData = await response.json(); } catch (e) { /* ignore */ }
              console.error('[handleSaveRow] Backend Error Data:', errorData);
              throw new Error(errorData.message || `Failed to save row data (Status: ${response.status})`);
          }
          const result = await response.json();
          // console.log(`[handleSaveRow] Row ${rowId} saved successfully. Result:`, result);
          row.classList.add('bg-success-light');
          setTimeout(() => row.classList.remove('bg-success-light'), 1000);
      } catch (error) {
          console.error(`[handleSaveRow] CAUGHT ERROR for row ${rowId}:`, error);
          row.classList.add('bg-danger-light');
          setTimeout(() => row.classList.remove('bg-danger-light'), 2000);
      }
  }

  function handleEdit(button) {
      const row = button.closest('tr');
      row?.querySelector('input')?.focus();
  }

  // --- Initial Load ---
  document.addEventListener('DOMContentLoaded', () => {
    // console.log('[DOMContentLoaded] Page loaded. Initializing table.');
    if (typeof annualPlanItems !== 'undefined' && Array.isArray(annualPlanItems)) {
        annualPlanItems.forEach(item => {
          const row = createTableRow(item);
          tableBody.appendChild(row);
        });
        updateBalances();
        // console.log('[DOMContentLoaded] Table initialization complete.');
    } else {
        console.error('[DOMContentLoaded] annualPlanItems is not available or not an array.');
    }
  });

</script>